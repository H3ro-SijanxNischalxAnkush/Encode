#Encode By Sijann
import base64
exec(base64.b64decode(b'Iy0tLS0tLS0tLS0tLS0gSU1QT1JUIC0tLS0tLS0tLS0tLSMKZnJvbSBvcyBpbXBvcnQgc3lzdGVtIGFzIGMKaW1wb3J0IG1hcnNoYWwKaW1wb3J0IGJhc2U2NAppbXBvcnQgemxpYgp0cnk6CiAgICBmcm9tIEN5dGhvbi5CdWlsZC5CdWlsZEV4ZWN1dGFibGUgaW1wb3J0IGJ1aWxkIGFzIGV4ZWN1dGUKZXhjZXB0OgogICAgYygnY2xlYXInKQojLS0tLS0tLS0tLS0tLS0tLSBMT0dPIC0tLS0tLS0tLS0tIwpsb2dvPScnJwoKXHgxYlsxOzk3bSAgICBfX19fX19fICAgX19fX19fX18KXHgxYlsxOzk3bSAgIC8gX19fXy8gfCAvIC8gX19fXy8KXHgxYlsxOzk3bSAgLyBfXy8gLyAgfC8gLyAvICAgICAKXHgxYlsxOzk3bSAvIC9fX18vIC98ICAvIC9fX18gIFx4MWJbMzg7NTsxOTZtLS0tLT4gQVVUSE9SICA6U2lqamFhbiEhClx4MWJbMTs5N20vX19fX18vXy8gfF8vXF9fX18vIFx4MWJbMzg7NTsxOTZtLS0tPiBHSVRIVUIgOlNpamFubiB4IE5pc2NoYWxsIHggQW5rdXNoaCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgClx4MWJbMTs5N21ceDFiWzE7OTdtXHgxYlsxOzk3bVx4MWJbMTs5N21ceDFiWzE7OTdtXHgxYlsxOzk3bVx4MWJbMTs5N21ceDFiWzE7OTdtCicnJwojLS0tLS0tLS0tLS0tLS0tIENMRUFSIEZVTkNUSU9OIC0tLS0tLS0tLS0tLS0jCmRlZiBjbGVhcigpOgogICAgYygnY2xlYXInKQogICAgcHJpbnQobG9nbykKICAgIHByaW50KDQwKictJykKICAgIHByaW50KCcgXHgxYlsxOzk3bVx4MWJbMTs5N21BVVRIT1IgOlNpamFubiB4IE5pc2NoYWxsIHggQW5rdXNoaCAgXHgxYlsxOzk3bSAnKQogICAgcHJpbnQoJyBFbmNvZGUgb3duIGNvbW1kOkJBU0U2NCAgRU5DUllQVElPTiBceDFiWzE7OTdtJykKICAgIHByaW50KDQwKictJykKIy0tLS0tLS0tLS0tIE1BSU4gRlVOQ1RJT04gLS0tLS0tLS0tLS0tIwpkZWYgbWFpbigpOgogICAgY2xlYXIoKQogICAgcHJpbnQoJyBceDFiWzE7OTdtWzFdXHgxYlsxOzk3bSBNQVJTSEFMIEVOQ1JZUFRJT04gJykKICAgIHByaW50KCcgXHgxYlsxOzk3bVsyXVx4MWJbMTs5N20gQkFTRTY0ICBFTkNSWVBUSU9OICcpCiAgICBwcmludCgnIFx4MWJbMTs5N21bM11ceDFiWzE7OTdtIFpMSUIgICAgRU5DUllQVElPTiAnKQogICAgcHJpbnQoJyBceDFiWzE7OTdtWzRdXHgxYlsxOzk3bSBFWElUIFRFUk1JTkFMICcpCiAgICBwcmludCg0MConLScpCiAgICBvcHRpb249aW5wdXQoJyBceDFiWzE7OTdtWz9dXHgxYlsxOzk3bSBDSE9JQ0UgTUVOVSA6ICcpCiAgICBpZiBvcHRpb24gaW4gWycxJywnMDEnXToKICAgICAgICBtYXJzaGFsX2VuYygpCiAgICBlbGlmIG9wdGlvbiBpbiBbJzInLCcwMiddOgogICAgICAgIGJhc2U2NF9lbmMoKQogICAgZWxpZiBvcHRpb24gaW4gWyczJywnMDMnXToKICAgICAgICB6bGliX2VuYygpCiAgICBlbGlmIG9wdGlvbiBpbiBbJzQnLCcwNCddOgogICAgICAgIGN5dGhvbl9leGVjdXRhYmxlKCkKICAgIGVsc2U6CiAgICAgICAgZXhpdCgnIFRPT0wgRVhJVEVEIDovJykKIy0tLS0tLS0tLS0tIE1BUlNIQUwgRU5DUllQVElPTiAtLS0tLS0tLS0tLS0tLSMKZGVmIG1hcnNoYWxfZW5jKCk6CiAgICBjbGVhcigpCiAgICBmaWxlPWlucHV0KCcgRU5URVIgU09VUkNFIEZJTEUgTkFNRSA6ICcpCiAgICBmaWxleD1pbnB1dCgnIEVOVEVSIE9VVFBVVCBGSUxFIE5BTUUgOiAnKQogICAgdHJ5OgogICAgICAgIGZpbGVfb3Blbj1vcGVuKGZpbGUsJ3InKS5yZWFkKCkKICAgIGV4Y2VwdDoKICAgICAgICBleGl0KCcgRklMRSBOT1QgRk9VTkQgRVJST1IgISEnKQogICAgY29tcGlsZXg9Y29tcGlsZShmaWxlX29wZW4sJ2RnJywnZXhlYycpCiAgICBkdW1wPW1hcnNoYWwuZHVtcHMoY29tcGlsZXgpCiAgICBydW5fY29kZT1mJ2ltcG9ydCBtYXJzaGFsIFxuZXhlYyhtYXJzaGFsLmxvYWRzKHtkdW1wfSkpJwogICAgb3V0X3B1dD1vcGVuKGZpbGV4LCd3JykKICAgIG91dF9wdXQud3JpdGUocnVuX2NvZGUpCiAgICBvdXRfcHV0LmNsb3NlKCkKICAgIHByaW50KDQwKictJykKICAgIHByaW50KCcgW+Kck+Kck10gRU5DUllQVElPTiBDT01QTEVURSA6LyAnKQogICAgcHJpbnQoJyBb4pyT4pyTXSBPVVRQVVQgRklMRSBTQVZFIEFTIDogJytmaWxleCkKIy0tLS0tLS0tLS0gQkFTRTY0IEVOQ1JZUFRJT04gLS0tLS0tLS0tLS0tIwpkZWYgYmFzZTY0X2VuYygpOgogICAgY2xlYXIoKQogICAgaW5wdXRfZmlsZT1pbnB1dCgnIEVOVEVSIFNPVVJDRSBGSUxFIFBBVEggOiAnKQogICAgb3V0cHV0X2ZpbGU9aW5wdXQoJyBFTlRFUiBPVVRQVVQgRklMRSBQQVRIIDogJykKICAgIHRyeToKICAgICAgICBmaWxlX29wZW49b3BlbihpbnB1dF9maWxlLCdyJykucmVhZCgpCiAgICBleGNlcHQ6CiAgICAgICAgZXhpdCgnIEZJTEUgTk9UIEZPVU5EIEVSUk9SICEhJykKICAgIGNvbXBpbGU9YmFzZTY0LmI2NGVuY29kZShmaWxlX29wZW4uZW5jb2RlKCkpCiAgICBydW5fY29kZT1mJyNFbmNvZGUgQnkgU2lqYW5uIGltcG9ydCBiYXNlNjRcbmV4ZWMoYmFzZTY0LmI2NGRlY29kZSh7Y29tcGlsZX0pKScKICAgIG91dF9wdXQ9b3BlbihvdXRwdXRfZmlsZSwndycpCiAgICBvdXRfcHV0LndyaXRlKHJ1bl9jb2RlKQogICAgb3V0X3B1dC5jbG9zZSgpCiAgICBwcmludCgnIFvinJPinJNdIEVOQ1JZUFRJT04gQ09NUExFVEUgOi8nKQogICAgcHJpbnQoJyBb4pyT4pyTXSBFTkMgRklMRSBTQVZFIEFTIDogJytvdXRwdXRfZmlsZSkKIy0tLS0tLS0tLS0tLS0tLS0gWkxJQiBFTkNSWVBUSU9OIC0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgemxpYl9lbmMoKToKICAgIGNsZWFyKCkKICAgIHNyYz1pbnB1dCgnIEVOVEVSIFNPVVJDRSBGSUxFIFBBVEggOiAnKQogICAgc2F2ZV9maWxlPWlucHV0KCcgRU5URVIgT1VUUFVUIEZJTEUgUEFUSCA6ICcpCiAgICB0cnk6CiAgICAgICAgc3JjX2ZpbGU9b3BlbihzcmMsJ3InKS5yZWFkKCkKICAgIGV4Y2VwdDoKICAgICAgICBleGl0KCcgRklMRSBOT1QgRk9VTkQgISEnKQogICAgY29tcGlsZV96bGliPXpsaWIuY29tcHJlc3Moc3JjX2ZpbGUuZW5jb2RlKCkpCiAgICBydW5fY29kZT1mJyMgRW5jb2RlIEJ5IFNpamFubiBpbXBvcnQgemxpYlxuZXhlYyh6bGliLmRlY29tcHJlc3Moe2NvbXBpbGVfemxpYn0pLmRlY29kZSgpKScKICAgIG91dF9wdXQ9b3BlbihzYXZlX2ZpbGUsJ3cnKQogICAgb3V0X3B1dC53cml0ZShydW5fY29kZSkKICAgIG91dF9wdXQuY2xvc2UoKQogICAgcHJpbnQoJyBb4pyT4pyTXSBFTkNSWVBUSU9OIENPTVBMRVRFIDovJykKICAgIHByaW50KCcgW+Kck+Kck10gRU5DIEZJTEUgU0FWRSBBUyA6ICcrc2F2ZV9maWxlKQojLS0tLS0tLS0tLS0tLS0tIENZVEhPTiBFWEVDVVRBQkxFIC0tLS0tLS0tLS0tLS0tLS0tIwpkZWYgY3l0aG9uX2V4ZWN1dGFibGUoKToKICAgIGNsZWFyKCkKICAgIGZpbGU9aW5wdXQoJyBFTlRFUiBTT1VSQ0UgRklMRSBQQVRIIDogJykKICAgIHRyeToKICAgICAgICBmaWxleD1vcGVuKGZpbGUsJ3InKS5yZWFkKCkKICAgIGV4Y2VwdDoKICAgICAgICBleGl0KCcgRklMRSBOT1QgRk9VTkQgRVJST1IgOi8nKQogICAgZXJyb3I9ZmlsZXgucmVwbGFjZSgnCScsJyAgICAnKQogICAgc29sdmU9b3BlbihmaWxlLCd3Jykud3JpdGUoZXJyb3IpCiAgICBleGVjdXRlKGZpbGUpCiAgICBjbGVhcigpCiAgICBwcmludCgnIFvinJPinJNdIENZVEhPTiBFWEVDVVRBQkxFIENPTVBMRVRFIDoiKScpCiAgICBzYXZlPWZpbGVbOi0zXQogICAgcHJpbnQoJyBb4pyT4pyTXSBFWEVDVVRBQkxFIEZJTEUgU0FWRSBBUyA6ICcrc2F2ZSkKIy0tLS0tLS0tLS0tLS0tLS0tIEVORCAtLS0tLS0tLS0tLS0tLSMKbWFpbigp'))